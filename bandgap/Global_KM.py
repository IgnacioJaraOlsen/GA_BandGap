import numpy as np
from scipy.sparse import csc_matrix
import os

from bandgap.Local_Stiffness import Local_Stiffness
from bandgap.Local_Mass import Local_Mass
from bandgap.Rotation_Matrix import Rotation_Matrix
from bandgap.Ele_Data import Ele_Data

def Global_KM(ne, connect, coord, E, dens, A, x):
    n_dofs_per_element = 4
    n_entries_per_element = n_dofs_per_element * n_dofs_per_element
    total_entries = ne * n_entries_per_element
    
    VI = np.empty(total_entries, dtype=int)
    VJ = np.empty(total_entries, dtype=int)
    VK = np.empty(total_entries)
    VM = np.empty(total_entries)

    counter = 0
    for ele in range(ne):
        Le, theta, dofs = Ele_Data(ele, coord, connect)
        Ee = E[ele, :]
        Ae = A[ele, :]
        dense = dens[ele, :]

        ke = Local_Stiffness(x[ele, 0], x[ele, 1], Ee, Ae, Le)
        me = Local_Mass(x[ele, 0], x[ele, 1], dense, Ae, Le)

        Re = Rotation_Matrix(theta)

        Ke = Re.T @ ke @ Re
        Me = Re.T @ me @ Re
        
        for i in range(n_dofs_per_element):
            dof_i = dofs[i]
            for j in range(n_dofs_per_element):
                dof_j = dofs[j]
                VI[counter] = dof_i
                VJ[counter] = dof_j
                VK[counter] = Ke[i, j]
                VM[counter] = Me[i, j]
                counter += 1

    K = csc_matrix((VK, (VI, VJ))).toarray()
    M = csc_matrix((VM, (VI, VJ))).toarray()

    return K, M


if __name__ == "__main__":
    os.system('cls')

    ne = 72
    connect = np.array([
        [ 1,     2],
        [ 2,     3],
        [ 3,     4],
        [ 4,     5],
        [ 6,     7],
        [ 7,     8],
        [ 8,     9],
        [ 9,    10],
        [11,    12],
        [12,    13],
        [13,    14],
        [14,    15],
        [16,    17],
        [17,    18],
        [18,    19],
        [19,    20],
        [21,    22],
        [22,    23],
        [23,    24],
        [24,    25],
        [ 1,     6],
        [ 2,     7],
        [ 3,     8],
        [ 4,     9],
        [ 5,    10],
        [ 6,    11],
        [ 7,    12],
        [ 8,    13],
        [ 9,    14],
        [10,    15],
        [11,    16],
        [12,    17],
        [13,    18],
        [14,    19],
        [15,    20],
        [16,    21],
        [17,    22],
        [18,    23],
        [19,    24],
        [20,    25],
        [ 1,     7],
        [ 2,     8],
        [ 3,     9],
        [ 4,    10],
        [ 6,    12],
        [ 7,    13],
        [ 8,    14],
        [ 9,    15],
        [11,    17],
        [12,    18],
        [13,    19],
        [14,    20],
        [16,    22],
        [17,    23],
        [18,    24],
        [19,    25],
        [ 2,     6],
        [ 3,     7],
        [ 4,     8],
        [ 5,     9],
        [ 7,    11],
        [ 8,    12],
        [ 9,    13],
        [10,    14],
        [12,    16],
        [13,    17],
        [14,    18],
        [15,    19],
        [17,    21],
        [18,    22],
        [19,    23],
        [20,    24]]) - 1
    
    coord = np.array([
        [     0,         0],
        [0.0250,         0],
        [0.0500,         0],
        [0.0750,         0],
        [0.1000,         0],
        [     0,    0.0250],
        [0.0250,    0.0250],
        [0.0500,    0.0250],
        [0.0750,    0.0250],
        [0.1000,    0.0250],
        [     0,    0.0500],
        [0.0250,    0.0500],
        [0.0500,    0.0500],
        [0.0750,    0.0500],
        [0.1000,    0.0500],
        [     0,    0.0750],
        [0.0250,    0.0750],
        [0.0500,    0.0750],
        [0.0750,    0.0750],
        [0.1000,    0.0750],
        [     0,    0.1000],
        [0.0250,    0.1000],
        [0.0500,    0.1000],
        [0.0750,    0.1000],
        [0.1000,    0.1000]])
    
    E = 1.0e+11 * np.array([
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100],
        [0.7000,    4.1100]])
    
    dens =  np.array([
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300],
        [2700,       19300]])
    
    A = 1.0e-04 * np.array([
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027],
        [0.1257,    0.5027]])
    
    x = np.array([
        [1,     1],
        [0,     0],
        [0,     0],
        [1,     1],
        [1,     1],
        [0,     0],
        [0,     0],
        [1,     1],
        [0,     0],
        [0,     0],
        [0,     0],
        [0,     0],
        [1,     1],
        [0,     0],
        [0,     0],
        [1,     1],
        [1,     1],
        [0,     0],
        [0,     0],
        [1,     1],
        [1,     1],
        [1,     1],
        [0,     0],
        [1,     1],
        [1,     1],
        [0,     0],
        [0,     0],
        [0,     0],
        [0,     0],
        [0,     0],
        [0,     0],
        [0,     0],
        [0,     0],
        [0,     0],
        [0,     0],
        [1,     1],
        [1,     1],
        [0,     0],
        [1,     1],
        [1,     1],
        [1,     1],
        [0,     0],
        [0,     0],
        [1,     1],
        [0,     0],
        [0,     1],
        [0,     0],
        [0,     0],
        [0,     0],
        [0,     0],
        [0,     1],
        [0,     0],
        [1,     1],
        [0,     0],
        [0,     0],
        [1,     1],
        [1,     1],
        [0,     0],
        [0,     0],
        [1,     1],
        [0,     0],
        [0,     0],
        [0,     1],
        [0,     0],
        [0,     0],
        [0,     1],
        [0,     0],
        [0,     0],
        [1,     1],
        [0,     0],
        [0,     0],
        [1,     1]])


    K, M = Global_KM(ne, connect, coord, E, dens, A, x)

    print(f'K:\n{K}')
    print(f'M:\n{M}')
